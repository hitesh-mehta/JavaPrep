/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int getSize(ListNode head){
        int size = 1;
        if(head == null) return 0;
        if(head.next == null) return 1;
        ListNode currNode = head;
        while(currNode.next!=null){
            size++;
            currNode = currNode.next;
        }return size;
    }
    public ListNode rotateRight(ListNode head, int k){
        int size = getSize(head);
        if (k==0||size==1||size==0) return head;
        return rotate(head,k%size);
    }
    public ListNode rotate(ListNode head, int k) {
        if(k==0) return head;
        if (head == null || head.next == null) return head;
        ListNode prevNode = head;
        ListNode currNode = head.next;
        while(currNode.next != null){
            prevNode = currNode;
            currNode = currNode.next;
        }
        ListNode lastNode = currNode;
        prevNode.next = null;
        currNode.next = head;
        head = currNode;
        head = rotateRight(head,k-1);
        return head;
    }
}
