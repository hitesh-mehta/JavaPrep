/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public int getSize(ListNode head){
        if (head==null) return 0;
        if(head.next==null) return 1;
        int size = 0;
        ListNode currNode = head;
        while (currNode!=null){
            size++;
            currNode = currNode.next;
        } return size;
    }
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        int sizeA = getSize(headA);
        int sizeB = getSize(headB);
        if (sizeA==0 || sizeB==0) return null;
        int flag = 0;
        ListNode currNodeA = headA;
        ListNode currNodeB = headB;
        if(sizeA>sizeB){
            for(int i=0;i<sizeA-sizeB;i++){
                currNodeA=currNodeA.next;
            }
        }else if (sizeB>sizeA){
            for(int i=0;i<sizeB-sizeA;i++){
                currNodeB=currNodeB.next;
            }
        }
        while(currNodeA!=null && currNodeB != null){
            if (currNodeA==currNodeB){
                return currNodeA;
            }currNodeA = currNodeA.next;
            currNodeB = currNodeB.next;
        }return null;
        
    }
}
